package com.Lambda;

/**
 * Lambda表达式的基本语法
 *
 * @author ：Axel
 * @date ：2020/6/10 19:24
 */
public class Demo01 {
    //1.Lambda表达式的基本语法
    /**
     * 1)声明：就是和lambda表达式绑定的接口类型
     * 2)参数：包含在一对圆括号中，和绑定的接口中的抽象方法中的参数个数及顺序一致。
     * 3)操作符 ->
     * 4)执行代码块：包含在一对大括号中，出现在操作符号的右侧
     *
     *
     * [接口声明] = (参数) -> {执行代码块}；
     *
     * */




    public static void main(String[] args) {
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------没有参数的Lambda表达式---------------------------------------------");
        //1.没有参数的Lambda表达式
        ILambda1 i1 = () -> {
            System.out.println("hello imooc!");
            System.out.println("welcome to New York!!");
            System.out.println("没有参数的Lambda表达式");
        };
        i1.test();

        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------执行代码块只有一行的简化Lambda表达式写法---------------------------------------------");

        ILambda1 i2 = () -> System.out.println("Hello !!!" + "                                      执行代码块只有一行的简化Lambda表达式写法");

        i2.test();

        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------有参数的Lambda表达式---------------------------------------------");

        //2.带有参数的Lambda表达式
        ILambda2 i21 = (String name, int age) -> {
            System.out.println(name + "say:my years old is " + age + "。                          有参数的Lambda表达式");
        };
        i21.test("Tom", 16);
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------Lambda根据绑定接口，自动判断类型推导---------------------------------------------");


        //2.1、Lambda可以直接根据当前接口的绑定定义当前参数类型
        //判断类型推导
        ILambda2 i22 = (n,a) -> {
            System.out.println(n + " 说，我今年 " + a +"岁了" + "                               Lambda根据绑定接口，自动判断类型推导");
        };
        i22.test("小兰", 1);

        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------带有参数，带有返回值的Lambda表达式---------------------------------------------");
        System.out.println();

        //3.带有参数，带有返回值的Lambda表达式
        ILambda3 i31 = ( a , b ) -> {
            return a + b;
        };
        System.out.println((i31.test(1, 2)) + "                                                          带有参数，带有返回值的Lambda表达式带有参数，带有返回值的Lambda表达式");
        System.out.println();

        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------佛系分割线---------------------------------------------");
        System.out.println("----------------------------------------带有参数，带有返回值的Lambda表达式，一行执行代码块简化---------------------------------------------");
        System.out.println();
        //3.1.如果Lambda表达式中只有一行执行代码块，可以省略return关键字
        ILambda3 i32 = (a, b) -> a + b;
        System.out.println(i32.test(5,6) + "                              带有参数，带有返回值的Lambda表达式，如果执行代码块只有一行操作，现在省略return关键字");
        System.out.println();





    }




    //1.没有参数、没有返回值的Lambda表达式绑定的接口
    interface ILambda1{
        void test();
    }

    //2.带有参数，没有返回值的Lambda表达式
    interface ILambda2{
        void test(String name, int age);
    }


    //3.带有参数，带有返回值的Lambda表达式
    interface ILambda3{
        int test(int a,int b);
    }




}
